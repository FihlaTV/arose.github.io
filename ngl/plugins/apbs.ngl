
var ApbsPreset = function( pqrComp, dxComp, params ){

    var p = params || {};

    var isolevel = p.isolevel !== undefined ? p.isolevel : 0.4;
    var isosurfOpacity = p.isosurfOpacity !== undefined ? p.isosurfOpacity : 0.6;
    var molsurfOpacity = p.molsurfOpacity !== undefined ? p.molsurfOpacity : 1.0;
    var molsurfColor = p.molsurfColor !== undefined ? p.molsurfColor : 3;

    // pqr

    var cartoonRepr = pqrComp.addRepresentation( "cartoon", {
        colorScheme: "bfactor",
        colorScale: "rwb",
        colorDomain: [ -1, 0, 1 ]
    } );

    var licoriceRepr = pqrComp.addRepresentation( "licorice", {
        colorScheme: "bfactor",
        colorScale: "rwb",
        colorDomain: [ -1, 0, 1 ]
    } );

    var molsurfRepr = pqrComp.addRepresentation( "surface", {
        volume: dxComp.surface,
        surfaceType: "sas",
        colorScheme: "volume",
        colorScale: "rwb",
        colorDomain: [ -molsurfColor, 0, molsurfColor ],
        opacity: molsurfOpacity,
    } );

    // dx

    var negIsosurfRepr = dxComp.addRepresentation( "surface", {
        name: "negative",
        isolevelType: "value",
        isolevel: -Math.abs( isolevel ),
        smooth: 1,
        color: "red",
        opacity: isosurfOpacity,
        side: THREE.DoubleSide,
        opaqueBack: false
    } );

    var posIsosurfRepr = dxComp.addRepresentation( "surface", {
        name: "positive",
        isolevelType: "value",
        isolevel: Math.abs( isolevel ),
        smooth: 1,
        color: "blue",
        opacity: isosurfOpacity,
        side: THREE.DoubleSide,
        opaqueBack: false
    } );

    stage.centerView();

    // params setter

    this.setIsosurfParams = function( params ){

        var p = params || {};
        var negp = Object.assign( {}, p );
        var posp = Object.assign( {}, p );

        if( p.isolevel !== undefined ){
            negp.isolevel = -Math.abs( p.isolevel );
            posp.isolevel = Math.abs( p.isolevel );
        }

        negIsosurfRepr.setParameters( negp );
        posIsosurfRepr.setParameters( posp );

    };

    this.setLicoriceParams = function( params ){

        licoriceRepr.setParameters( params );

    };

    this.setCartoonParams = function( params ){

        cartoonRepr.setParameters( params );

    };

    this.setMolsurfParams = function( params ){

        molsurfRepr.setParameters( params );

    };

    this.isosurfRepr = new NGL.RepresentationCollection( [
        negIsosurfRepr, posIsosurfRepr
    ] );
    this.negIsosurfRepr = negIsosurfRepr;
    this.posIsosurfRepr = posIsosurfRepr;

    this.licoriceRepr = licoriceRepr;
    this.cartoonRepr = cartoonRepr;
    this.molsurfRepr = molsurfRepr;

};


var ApbsWidget = function( pqrComp, dxComp ){

    var isolevel = 0.5;
    var isosurfOpacity = 0.6;
    var molsurfOpacity = 1.0;
    var molsurfColor = 3;

    var container = new UI.Panel();

    var apbsPreset = new ApbsPreset(
        pqrComp, dxComp, {
            isolevel: isolevel,
            isosurfOpacity: isosurfOpacity,
            molsurfOpacity: molsurfOpacity,
            molsurfColor: molsurfColor
        }
    );

    var isolevelNumber = new UI.Number( isolevel )
        .setRange( 0, Infinity )
        .onChange( function(){
            apbsPreset.setIsosurfParams( {
                isolevel: isolevelNumber.getValue()
            } );
        } );

    var isosurfOpacityRange = new UI.Range( 0, 1, isosurfOpacity, 0.01 )
        .onInput( function(){
            apbsPreset.setIsosurfParams( {
                opacity: isosurfOpacityRange.getValue()
            } );
        } );

    var molsurfOpacityRange = new UI.Range( 0, 1, molsurfOpacity, 0.01 )
        .onInput( function(){
            apbsPreset.setMolsurfParams( {
                opacity: molsurfOpacityRange.getValue()
            } );
        } );

    var molsurfColorRange = new UI.Range( 0, 10, molsurfColor, 0.1 )
        .onInput( function(){
            var value = molsurfColorRange.getValue();
            apbsPreset.setMolsurfParams( {
                colorDomain: [ -value, 0, value ]
            } );
        } );

    container.add(
        new UI.Text( "isolevel" ).setMarginRight( "10px" ),
        isolevelNumber,
        // isolevelSelect,
        new UI.Break(),
        new UI.Text( "isosurf opacity" ).setMarginRight( "10px" ),
        isosurfOpacityRange,
        new UI.Break(),
        new UI.Text( "molsurf opacity" ).setMarginRight( "10px" ),
        molsurfOpacityRange,
        new UI.Break(),
        new UI.Text( "molsurf color" ).setMarginRight( "10px" ),
        molsurfColorRange,
        new UI.Break(),
        uiVisibilityButton(
            "electrostatic isosurface", apbsPreset.isosurfRepr
        ),
        new UI.Break(),
        uiVisibilityButton(
            "molecular surface", apbsPreset.molsurfRepr
        ),
        new UI.Break(),
        uiVisibilityButton(
            "cartoon", apbsPreset.cartoonRepr
        ),
        new UI.Break(),
        uiVisibilityButton(
            "licorice", apbsPreset.licoriceRepr
        )
    );

    return container;

};


function loadApbs( pqr, dx, isBinary ){

    var fileInfo = NGL.getDataInfo( dx );
    var dxExt = ( isBinary || fileInfo.ext === "dxbin" ) ? "dxbin" : "dx";

    var infoText = new UI.Text( "loading..." );
    panel.add( infoText );

    var initComp = function( comp ){
        comp.requestGuiVisibility( false );
        comp.centerView();
        return comp;
    }

    var promiseList = [
        stage.loadFile( pqr, { ext: "pqr" } ).then( initComp ),
        stage.loadFile( dx, { ext: dxExt } ).then( initComp )
    ];

    return Promise.all( promiseList ).then( function( compList ){
        apbsWidget = new ApbsWidget(
            compList[ 0 ], compList[ 1 ]
        );
        panel.remove( infoText );
        panel.add( apbsWidget );
    } );

}


var ApbsLoader = function(){

    var container = new UI.Panel();

    var pqrFile = new UI.File().setWidth( "200px" );
    var dxFile = new UI.File().setWidth( "200px" );
    var infoText = new UI.Text();
    var loadBtn = new UI.Button( "Load" ).onClick( loadFiles );
    var exampleBtn = new UI.Button( "Example" ).onClick( loadExample );

    //

    function loadFiles(){

        var pqr = pqrFile.getFiles()[ 0 ];
        var dx = dxFile.getFiles()[ 0 ];

        if( !pqr || !dx ){
            infoText.setValue( "please supply PQR and DX files" );
            return;
        }else{
            infoText.setValue( "" );
        }

        loadApbs( pqr, dx );

    }

    function loadExample(){

        loadApbs(
            "data://1crn_apbs.pqr",
            "data://1crn_apbs_pot.dxbin"
        );

    }

    //

    var description = new UI.Panel().add(
        new UI.Html( "There is a public APBS <a href='http://nbcr-222.ucsd.edu/pdb2pqr_2.0.0/'>server</a> to calculate PQR and DX files. Please <a href='https://docs.google.com/forms/d/1CsftV09vLGIxeMHwevGy8SDVYKoihs8EWLNjsbjxIRw/viewform'>register</a> your usage of APBS to support the <a href='http://www.poissonboltzmann.org/'>APBS project</a>." )
    );

    container.add(
        description,
        new UI.Break(),
        new UI.Text( "PQR:" ).setWidth( "45px" ),
        pqrFile,
        new UI.Break(),
        new UI.Text( "DX:" ).setWidth( "45px" ),
        dxFile,
        new UI.Break(),
        new UI.Break(),
        loadBtn.setMarginRight( "10px" ),
        exampleBtn.setMarginRight( "10px" ),
        infoText
    );

    return container;

};

//

function apbsLoader(){

    var pqr = NGL.GET( "pqr" );
    var dx = NGL.GET( "dx" );
    var dxbin = NGL.GET( "dxbin" );
    var isBinary = false;
    if( dxbin ){
        dx = dxbin;
        isBinary = true;
    }

    if( pqr, dx ){
        loadApbs( pqr, dx, isBinary );
    }else{
        var apbsLoader = new ApbsLoader();
        panel.add( apbsLoader );
    }

}
